package br.com.magnasistemas.auth_server_saude.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;
import org.springframework.security.oauth2.server.authorization.OAuth2Authorization;
import org.springframework.security.oauth2.server.authorization.config.annotation.web.configuration.OAuth2AuthorizationServerConfiguration;
import org.springframework.security.oauth2.server.authorization.config.annotation.web.configurers.OAuth2AuthorizationServerConfigurer;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;

@Configuration
public class SecurityFilterConfig {

	@Bean
	@Order(1)
	SecurityFilterChain authServerSecurityFilterChain(HttpSecurity http) throws Exception {
		OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);
		
		http.
		exceptionHandling((exception) ->{
			exception.authenticationEntryPoint(new LoginUrlAuthenticationEntryPoint("login"));
		})
		.oauth2ResourceServer((oauth2) ->{
			oauth2.jwt(Customizer.withDefaults());
		})
		.getConfigurer(OAuth2AuthorizationServerConfigurer.class)
		.oidc(
			Customizer.withDefaults());
		
		return http.build();
	}
	
	@Bean
	@Order(2)
	SecurityFilterChain defaulSecurityFilterChain(HttpSecurity http) throws Exception {
		http.authorizeHttpRequests((authorize) ->{
			authorize.anyRequest().authenticated();
		}).formLogin(Customizer.withDefaults());
		
		return http.build();
	}
}
