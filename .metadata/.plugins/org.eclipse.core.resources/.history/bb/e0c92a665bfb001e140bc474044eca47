package br.com.magnasistemas.auth_server_saude.security;

import java.io.IOException;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.time.Duration;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.core.io.ClassPathResource;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.jdbc.core.JdbcOperations;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.core.AuthorizationGrantType;
import org.springframework.security.oauth2.core.ClientAuthenticationMethod;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.NimbusJwtEncoder;
import org.springframework.security.oauth2.server.authorization.JdbcOAuth2AuthorizationConsentService;
import org.springframework.security.oauth2.server.authorization.JdbcOAuth2AuthorizationService;
import org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationConsentService;
import org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationService;
import org.springframework.security.oauth2.server.authorization.client.JdbcRegisteredClientRepository;
import org.springframework.security.oauth2.server.authorization.client.RegisteredClient;
import org.springframework.security.oauth2.server.authorization.client.RegisteredClientRepository;
import org.springframework.security.oauth2.server.authorization.config.annotation.web.configuration.OAuth2AuthorizationServerConfiguration;
import org.springframework.security.oauth2.server.authorization.config.annotation.web.configurers.OAuth2AuthorizationServerConfigurer;
import org.springframework.security.oauth2.server.authorization.settings.AuthorizationServerSettings;
import org.springframework.security.oauth2.server.authorization.settings.ClientSettings;
import org.springframework.security.oauth2.server.authorization.settings.TokenSettings;
import org.springframework.security.oauth2.server.authorization.token.JwtEncodingContext;
import org.springframework.security.oauth2.server.authorization.token.OAuth2TokenCustomizer;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;
import org.springframework.security.web.util.matcher.MediaTypeRequestMatcher;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.jwk.JWKSet;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jose.jwk.source.JWKSource;
import com.nimbusds.jose.proc.SecurityContext;

import br.com.magnasistemas.auth_server_saude.entity.Usuario;
import br.com.magnasistemas.auth_server_saude.repository.UsuarioRepository;
import br.com.magnasistemas.auth_server_saude.security.AuthProperties.JksProperties;

@EnableWebSecurity
@Configuration
public class AuthSecurityConfig {

	@Bean
	@Order(Ordered.HIGHEST_PRECEDENCE)
	public SecurityFilterChain defaultFilterChain(HttpSecurity http) throws Exception {
		
		http.authorizeHttpRequests(req ->{
			req.requestMatchers(HttpMethod.POST, "/usuarios").hasAnyRole("FUNCIONARIO");
		});
		
		OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);
		
		http.getConfigurer(OAuth2AuthorizationServerConfigurer.class)
			.oidc(Customizer.withDefaults());
		http
			.exceptionHandling((exceptions) -> exceptions
				.defaultAuthenticationEntryPointFor(
					new LoginUrlAuthenticationEntryPoint("/login"),
					new MediaTypeRequestMatcher(MediaType.TEXT_HTML)
				)
			)
			.oauth2ResourceServer((resourceServer) -> resourceServer
				.jwt(Customizer.withDefaults()));

		return http.build();
	}
	
	@Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowedOrigins(Arrays.asList("http://localhost:4200"));
        config.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        config.setAllowCredentials(true);
        config.setAllowedHeaders(Arrays.asList("Content-Type", "Authorization"));

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", config);
        return source;
    }
	
	@Bean 
	@Order(2)
	SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http)
			throws Exception {
		
		http
			.authorizeHttpRequests(authorize -> {
				authorize
				.requestMatchers("/error").permitAll()
				.anyRequest().authenticated();
			})
			.formLogin(formLogin -> formLogin
				.loginPage("/login")
				.permitAll()
		);
		
		var retorno = http.build();
		
		return retorno;
	}
	
	@Bean
    WebSecurityCustomizer webSecurityCustomizer() {
        return (web) -> web.debug(false)
                .ignoring()
                .requestMatchers("/webjars/**", "/images/**", "/css/**", "/assets/**", "/favicon.ico");
    }
	
	@Bean
	public OAuth2TokenCustomizer<JwtEncodingContext> jwtEncodingContextAuth2TokenCustomizer(UsuarioRepository usuarioRepository){
		return (context ->{
			Authentication authentication = context.getPrincipal();
			
			if(authentication.getPrincipal() instanceof User) {
				final User user = (User) authentication.getPrincipal();
				
				Usuario usuario = usuarioRepository.findByLogin(user.getUsername());
				
				Set<String> authorities = new HashSet<>();
				
				for(GrantedAuthority authority: user.getAuthorities()) {
					authorities.add(authority.toString());
				}
				
				if(usuario.getIdExterno() != null) {
					context.getClaims().claim("idExterno", usuario.getIdExterno().toString());					
				}
				context.getClaims().claim("idPapel", usuario.getPapel().getId().toString());
				context.getClaims().claim("user_id", usuario.getId().toString());
				context.getClaims().claim("login", usuario.getUsername());
				context.getClaims().claim("authorities", authorities);
			}
		});
	}
	
	@Bean
	public RegisteredClientRepository registeredClientRepository(PasswordEncoder passwordEncoder,
																JdbcTemplate jdbcTemplate) {
		
		RegisteredClient awblogClient = RegisteredClient
				.withId("2")
				.clientId("telaAngular")
				.clientSecret(passwordEncoder.encode("Magna@123"))
				.clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)
				.authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)
				.authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)
				.authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)
				.clientSettings(ClientSettings.builder().requireAuthorizationConsent(false).build())
				.redirectUri("http://localhost:3000/authorized")
				.redirectUri("https://oidcdebugger.com/debug")
				.redirectUri("https://oauth.pstmn.io/v1/callback")
				.redirectUri("http://localhost:4200/sucesso-login")
				.tokenSettings(TokenSettings.builder()
						.accessTokenTimeToLive(Duration.ofMinutes(15))
						.refreshTokenTimeToLive(Duration.ofDays(1))
						.reuseRefreshTokens(false)
						.build())
				.clientSettings(ClientSettings.builder()
						.requireAuthorizationConsent(true)
						.build())
				.build();
		
		JdbcRegisteredClientRepository clientRepository = new JdbcRegisteredClientRepository(jdbcTemplate);
		clientRepository.save(awblogClient);
		
		return clientRepository;
	}
	
	@Bean
	public OAuth2AuthorizationService oAuth2AuthorizationService(JdbcOperations jdbcOperations,
																RegisteredClientRepository registeredClientRepository) {
		return new JdbcOAuth2AuthorizationService(
				jdbcOperations, registeredClientRepository);
	}
	
//	@Bean 
//	public OAuth2AuthorizationConsentService oAuth2AuthorizationConsentService (JdbcOperations jdbcOperations,
//																					RegisteredClientRepository registeredClientRepository) {
//		return new JdbcOAuth2AuthorizationConsentService
//				(jdbcOperations, registeredClientRepository);
//	}
	
	@Bean 
	public OAuth2AuthorizationConsentService oAuth2AuthorizationConsentService (JdbcOperations jdbcOperations,
																					RegisteredClientRepository registeredClientRepository) {
		return new JdbcOAuth2AuthorizationConsentService
				(jdbcOperations, registeredClientRepository);
	}
	
	@Bean
	public AuthorizationServerSettings serverSettings(AuthProperties authProperties) {
		return AuthorizationServerSettings.builder()
				.issuer(authProperties.getProviderUri())
				.build();
	}
	
	@Bean
	public JWKSet jwkSet(AuthProperties authProperties) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, JOSEException {
		JksProperties jksProperties = authProperties.getJks();
		
		
		String jksPath = authProperties.getJks().getPath();
		
		final InputStream inputStream = new ClassPathResource(jksPath).getInputStream();
		
		final KeyStore keyStore = KeyStore.getInstance("JKS");
		keyStore.load(inputStream, jksProperties.getStorepass().toCharArray());
		
		
		RSAKey rsaKey = RSAKey.load(keyStore, 
				jksProperties.getAlias(), 
				jksProperties.getKeypass().toCharArray());
		
		return new JWKSet(rsaKey);
	}
	
	@Bean
	public JWKSource<SecurityContext> jwkSource(JWKSet jwkSet){
		return ((jwkSelector, securityContext) -> jwkSelector.select(jwkSet));
	}
	
	@Bean
	public JwtEncoder jwtEncoder(JWKSource<SecurityContext> jwSource) {
		return new NimbusJwtEncoder(jwSource);
	}
}
