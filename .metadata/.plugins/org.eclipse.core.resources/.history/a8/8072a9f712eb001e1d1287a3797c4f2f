package br.com.magnasistemas.auth_server_saude.security;

import java.io.InputStream;
import java.security.KeyStore;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.core.io.ClassPathResource;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.oauth2.core.AuthorizationGrantType;
import org.springframework.security.oauth2.core.ClientAuthenticationMethod;
import org.springframework.security.oauth2.jwt.JwtEncoder;
import org.springframework.security.oauth2.jwt.NimbusJwtEncoder;
import org.springframework.security.oauth2.server.authorization.client.InMemoryRegisteredClientRepository;
import org.springframework.security.oauth2.server.authorization.client.RegisteredClient;
import org.springframework.security.oauth2.server.authorization.client.RegisteredClientRepository;
import org.springframework.security.oauth2.server.authorization.config.annotation.web.configuration.OAuth2AuthorizationServerConfiguration;
import org.springframework.security.oauth2.server.authorization.settings.AuthorizationServerSettings;
import org.springframework.security.oauth2.server.authorization.settings.ClientSettings;
import org.springframework.security.oauth2.server.authorization.settings.TokenSettings;
import org.springframework.security.oauth2.server.authorization.token.JwtEncodingContext;
import org.springframework.security.oauth2.server.authorization.token.OAuth2TokenCustomizer;
import org.springframework.security.web.SecurityFilterChain;

import com.nimbusds.jose.jwk.JWKSet;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jose.jwk.source.JWKSource;
import com.nimbusds.jose.proc.SecurityContext;

import br.com.magnasistemas.auth_server_saude.entity.Usuario;
import br.com.magnasistemas.auth_server_saude.repository.UsuarioRepository;
import br.com.magnasistemas.auth_server_saude.security.AuthProperties.JksProperties;

@EnableWebSecurity
@Configuration
public class AuthSecurityConfig {

	@Bean
	@Order(Ordered.HIGHEST_PRECEDENCE)
	public SecurityFilterChain defaultFilterChain(HttpSecurity http) throws Exception {
		OAuth2AuthorizationServerConfiguration.applyDefaultSecurity(http);
		
		return http.formLogin((form) -> {
			Customizer.withDefaults();
		}).build();
	}
	
	@Bean
	public SecurityFilterChain authFilterChain(HttpSecurity http) throws Exception {
		http.authorizeHttpRequests((req) ->{
			req.anyRequest().authenticated();
		});
		
		return http.formLogin((form) -> {
			Customizer.withDefaults();
		}).build();
	}
	
	@Bean
	public OAuth2TokenCustomizer<JwtEncodingContext> jwtEncodingContextAuth2TokenCustomizer(UsuarioRepository usuarioRepository){
		return ((context) ->{
			Authentication authentication = context.getPrincipal();
			
			if(authentication.getPrincipal() instanceof User ) {
				final User user = (User) authentication.getPrincipal();
				
				Usuario usuario = usuarioRepository.findByLogin(user.getUsername());
				
				List<String> authorities = new ArrayList<>();
				
				for(GrantedAuthority authority: user.getAuthorities()) {
					authorities.add(authority.toString());
				}
				
				context.getClaims().claim("idExterno", usuario.getIdExterno().toString());
				context.getClaims().claim("idPapel", usuario.getPapel().getId().toString());
				context.getClaims().claim("user_id", usuario.getId().toString());
				context.getClaims().claim("login", usuario.getUsername());
				context.getClaims().claim("authorities", authorities);
			}
		});
	}
	
	@Bean
	public RegisteredClientRepository registeredClientRepository(PasswordEncoder passwordEncoder) {
		
		RegisteredClient awuserClient = RegisteredClient
				.withId("1")
				.clientId("awuser")
				.clientSecret(passwordEncoder.encode("123456"))
				.clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)
				.authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)
				.scope("users:read")
				.scope("users:write")
				.tokenSettings(TokenSettings.builder()
						.accessTokenTimeToLive(Duration.ofMinutes(5))
						.build())
				.clientSettings(ClientSettings.builder()
						.requireAuthorizationConsent(false)
						.build())
				.build();
		
		RegisteredClient awblogClient = RegisteredClient
				.withId("2")
				.clientId("awblog")
				.clientSecret(passwordEncoder.encode("123456"))
				.clientAuthenticationMethod(ClientAuthenticationMethod.CLIENT_SECRET_BASIC)
				.authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)
				.authorizationGrantType(AuthorizationGrantType.REFRESH_TOKEN)
				.redirectUri("http://localhost:3000/authorized")
				.redirectUri("https://oidcdebugger.com/debug")
				.redirectUri("https://oauth.pstmn.io/v1/callback")				
				.scope("myuser:read")
				.scope("myuser:write")
				.scope("posts:write")
				.tokenSettings(TokenSettings.builder()
						.accessTokenTimeToLive(Duration.ofMinutes(15))
						.refreshTokenTimeToLive(Duration.ofDays(1))
						.reuseRefreshTokens(false)
						.build())
				.clientSettings(ClientSettings.builder()
						.requireAuthorizationConsent(true)
						.build())
				.build();
		
		return new InMemoryRegisteredClientRepository(
				Arrays.asList(awuserClient, awblogClient)
				);
	}
	
	@Bean
	public AuthorizationServerSettings serverSettings(AuthProperties authProperties) {
		return AuthorizationServerSettings.builder()
				.issuer(authProperties.getProviderUri())
				.build();
	}
	
	@Bean
	public JWKSet jwkSet(AuthProperties authProperties) throws Exception{
		JksProperties jksProperties = authProperties.getJks();
		
		
		String jksPath = authProperties.getJks().getPath();
		
		final InputStream inputStream = new ClassPathResource(jksPath).getInputStream();
		
		final KeyStore keyStore = KeyStore.getInstance("JKS");
		keyStore.load(inputStream, jksProperties.getStorepass().toCharArray());
		
		RSAKey rsaKey = RSAKey.load(keyStore, 
				jksProperties.getAlias(), 
				jksProperties.getKeypass().toCharArray());
		
		return new JWKSet(rsaKey);
	}
	
	@Bean
	public JWKSource<SecurityContext> jwkSource(JWKSet jwkSet){
		return ((jwkSelector, securityContext) -> jwkSelector.select(jwkSet));
	}
	
	@Bean
	public JwtEncoder jwtEncoder(JWKSource<SecurityContext> jwSource) {
		return new NimbusJwtEncoder(jwSource);
	}
}
